#!/bin/sh

if [ "" == "${WORKDIR}" ]; then
  if [ -d "${HOME}/run-cicd" ]; then
    CTRLDIR=${HOME}/run-cicd
  elif [ -d "./run-cicd" ]; then
    CTRLDIR=./run-cicd
  else
    CTRLDIR=""
  fi
else
  CTRLDIR=${WORKDIR}/run-cicd
fi
if [ "" == "${CTRLDIR}" ]; then
  echo "Can't find CI/CD resources !"
  exit 1
fi

echo ""
echo "************** RUN READ CONFIG ***************"
echo ""

echo "STEP1. Get parameters "
# get parameters
if ([ $# -lt 4 ]) || ([ $# -eq 1 ] && [ "$1" == "-h" -o "$1" == "--help" ]); then
  echo "read-config <profile> <root directory> <config kinds> <config server>"
  echo " profile: 배포대상 환경 프로파일(ex:dev, prod) "
  echo " root directory: project의 최상위 디렉토리. '.'은 현재 디렉토리 의미함. "
  echo " config kinds: 읽은 config 종류로 cicd,cm,secret중 지정하며, comma로 복수값 지정 가능함 "
  echo " config server: config server의 ingress명 "
  echo " ex) ./read-config prod ~/worki cicd,cm,secret config-server"
  echo " ex) ./read-config prod . cicd config-server"
  exit 1
fi

profile=$1
basedir=$2
config_kinds=$3
configserver=$4

appname=`cat ${basedir}/pom.xml | grep \<finalName\> | cut -d ">" -f2 | cut -d "<" -f1`
if [ "${appname}" == "" ]; then
    echo "CAN'T get application name. check <build>/<finalName> in pom.xml"
    exit 1
fi
CONFIG_KIND=""

function mkFile() {
  #echo "Donwload config file: ${fn} from ${url}"

  fp=${basedir}/deploy
  wget -O ${fp}/${fn} ${url}
  if [ $? -eq 1 ]; then
    echo "Fail to downloade: ${url}"
    return 1
  fi

  len=`${CTRLDIR}/cmd/jq '.propertySources | length' ${fp}/${fn}`
  switch=on
  i=0; while [ "$i" -lt "$len" ]
  do
    switch=off
    nm=`${CTRLDIR}/cmd/jq ".propertySources[$i].name" ${fp}/${fn}`

    #evaluate do or not
    if [ "${CONFIG_KIND}" == "cicd" ]; then
      if [[ "$nm" =~ "cicd-" ]] && [[ "$nm" =~ ".properties" ]]; then
        switch=on
      fi
    elif [ "${CONFIG_KIND}" == "cm" ]; then
      if [[ "$nm" =~ "cm-" ]] && [[ "$nm" =~ ".properties" ]]; then
        switch=on
      fi
      if [[ "$nm" =~ "application.properties" ]]; then
        switch=on
      fi
    elif [ "${CONFIG_KIND}" == "secret" ]; then
      if [[ "$nm" =~ "secret-" ]] && [[ "$nm" =~ ".properties" ]]; then
        switch=on
      fi
    fi

    if [ "${switch}" == "off" ]; then
      echo ""
    else
      #echo "$i => $nm"

      chk=`${CTRLDIR}/cmd/jq ".propertySources[$i].source" ${fp}/${fn} > ${fp}/$i-${fn}`
      if [ $? -eq 0 ]; then
        len2=`${CTRLDIR}/cmd/jq "keys | length" ${fp}/$i-${fn}`

	      j=0; while [ "$j" -lt "$len2" ]
        do
            key=`${CTRLDIR}/cmd/jq -r "keys[$j]" ${fp}/$i-${fn}`
            val=`${CTRLDIR}/cmd/jq -r ".[\"$key\"]" ${fp}/$i-${fn}`
            echo "$key=$val" >> ${ofn}
	    j=$((j + 1))
        done
      fi
    fi
    i=$((i + 1))
  done
}

# generage file depends on config kind
echo "STEP2. Generate config file "

mkdir -p ${basedir}/deploy 2>/dev/null

# set download url 환경변수
uri="http://${configserver}/${appname}"

# check jq available
jqver=`jq -V`
if [ "" == "${jqver}" ]; then
  echo "jq is not available ! it will install automatically."
  curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o /usr/local/bin/jq
  chmod a+x /usr/local/bin/jq
  echo "jq is installed !"
else
  echo "jq is available !"
fi

if [ -f "${CTRLDIR}/cmd/jq" ]; then
  echo "${CTRLDIR}/cmd/jq exists !"
else
  echo "${CTRLDIR}/cmd/jq is NOT exist !. we will make link file."
  install $(which jq) ${CTRLDIR}/cmd/jq
fi

configs=`echo ${config_kinds} | sed "s/,/ /g"`

for kind in ${configs}
do
  CONFIG_KIND=${kind}
  echo "read config ->  ${kind}"

  if [ "profile" == "${kind}" ]; then  # ex) variables for application
    url=${uri}/common,${profile}
  else    
    url=${uri}/${kind}-common,${kind}-${profile}
  fi 
  fn=${kind}.json
  ofn=${basedir}/deploy/${kind}.properties
  echo "" > ${ofn}

  mkFile
done

echo ""
echo "************** END READ CONFIG ***************"
echo ""
exit 0