#!/bin/sh

if [ "" == "${WORKDIR}" ]; then
  if [ -d "${HOME}/run-cicd" ]; then 
    CTRLDIR=${HOME}/run-cicd
  elif [ -d "./run-cicd" ]; then
    CTRLDIR=./run-cicd
  else
    CTRLDIR=""
  fi
else
  CTRLDIR=${WORKDIR}/run-cicd
fi
if [ "" == "${CTRLDIR}" ]; then
  echo "Can't find CI/CD resources !"
  exit 1
fi

echo ""
echo "************* RUN BUILD Container image *****************"
echo ""
echo "STEP1: Get Parameters"

# get parameters
if ([ $# -lt 2 ]) || ([ $# -eq 1 ] && [ "$1" == "-h" -o "$1" == "--help" ]); then
  echo "build-image <root directory> <dev lang>"
  echo " root directory: project의 최상위 디렉토리. '.'은 현재 디렉토리 의미함. "
  echo " dev lang: 개발 언어 (java, react, nodejs)"
  echo " ex) ./build-image ~/work java"
  echo " ex) ./build-image . react"
  exit 1
fi

basedir=$1
devlang=$2
echo ""

# if the lang is react, do copy config file if not exists.  
if ([ "${devlang}" == "react" ]) && ! ([ -f ${basedir}/default.conf.template  ]) ; then
  cp ${CTRLDIR}/dockerfile/default.conf.template ${basedir} 
fi

# set variables from config.properties: converted from '.' to '_'
echo "STEP2. Set environment variables "
if [ -f ${basedir}/cicd/cicd-common.properties ]; then  # NOT use config server 
  eval $(${CTRLDIR}/cmd/set-env ${basedir}/cicd/cicd-common.properties)
else
  eval $(${CTRLDIR}/cmd/set-env ${basedir}/deploy/cicd.properties)
fi

echo ""

# generte Dockerfile
echo "STEP3. Generate Dockerfile "

dockerfile_name=""
container_base_image="${base_image}"
if [ "${devlang}" == "java" ]; then
  dockerfile_name=Dockerfile4java
  if [ "" == "${container_base_image}" ]; then
    container_base_image=openjdk:8-jre-slim
  fi
elif [ "${devlang}" == "nodejs" ]; then
  dockerfile_name=Dockerfile4nodejs
  if [ "" == "${container_base_image}" ]; then
    container_base_image=node:slim
  fi
elif [ "${devlang}" == "react" ]; then
  dockerfile_name=Dockerfile4react
  if [ "" == "${container_base_image}" ]; then
    container_base_image=node:slim
  fi
else
  echo "NOT Supported Language!"
  exit 1
fi

# build image
echo "STEP4. Build image "
echo "image: ${image_registry}/${image_project}/${image_repository}:${image_tag}"

sed "s@{{ BASE_IMAGE }}@${container_base_image}@g" ${CTRLDIR}/dockerfile/${dockerfile_name} > tmp && mv tmp ${CTRLDIR}/dockerfile/${dockerfile_name}  # change base image

if [ "${devlang}" == "java" ]; then
  echo "*** RUN -> docker build --build-arg ARTIFACTORY_FILE=${image_repository}.jar -f ${CTRLDIR}/dockerfile/${dockerfile_name} -t ${image_registry}/${image_project}/${image_repository}:${image_tag} ${basedir}"
  docker build --build-arg ARTIFACTORY_FILE=${image_repository}.jar -f ${CTRLDIR}/dockerfile/${dockerfile_name} -t ${image_registry}/${image_project}/${image_repository}:${image_tag} ${basedir}
elif [ "${devlang}" == "nodejs" ]; then
  main_app=`${CTRLDIR}/cmd/jq '.main' ${basedir}/package.json`
  main_app="${main_app%\"}"
  main_app="${main_app#\"}"
  if [ "${main_app}" == "" ]; then
    echo "CAN'T get main application. It must be specified in package.json as 'main' key."
    exit 1
  fi

  echo "*** RUN -> docker build --build-arg MAIN_APP=${main_app} -f ${CTRLDIR}/dockerfile/${dockerfile_name} -t ${image_registry}/${image_project}/${image_repository}:${image_tag} ${basedir}"
  docker build --build-arg MAIN_APP=${main_app} -f ${CTRLDIR}/dockerfile/${dockerfile_name} -t ${image_registry}/${image_project}/${image_repository}:${image_tag} ${basedir}
else
  echo "*** RUN -> docker build -f ${CTRLDIR}/dockerfile/${dockerfile_name} -t ${image_registry}/${image_project}/${image_repository}:${image_tag} ${basedir}"
  docker build -f ${CTRLDIR}/dockerfile/${dockerfile_name} -t ${image_registry}/${image_project}/${image_repository}:${image_tag} ${basedir}
fi
echo ""
if [ $? -eq 1 ]; then
  echo "FAIL TO Build image "
  exit 1
fi

echo ""
echo "************* END BUILD Container image *****************"
echo ""
exit 0

